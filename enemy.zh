////////////////////////////////////////////////////////////////
// Enemies
// Used to store all the information about an enemy.
// They're backed by npcs.

////////////////////////////////////////////////////////////////
// Misc. Constants

// D argument index for ffc scripts.
const int ENEMY_FFCD_ID = 0;

////////////////////////////////////////////////////////////////
// Data Array

// Maximum number of enemies.
const int ENEMY_DATA_COUNT = 255;
// Space allocated for each enemy.
const int ENEMY_DATA_SIZE = 100;
// All enemy data.
int Enemy_Data[25500]; // size is previous two multiplied

//// First flag group.
const int ENEMY_F1 = 0;
// If this slot has been allocated.
const int ENEMY_F1_ALLOC = 1b;

// Indices for enemy's boundaries.
const int ENEMY_BOUNDS      = 1;
const int ENEMY_BOUND_UP    = 1;
const int ENEMY_BOUND_DOWN  = 2;
const int ENEMY_BOUND_LEFT  = 3;
const int ENEMY_BOUND_RIGHT = 4;

// Indices for enemy's life.
const int ENEMY_LIFE = 5;
// Index for the enemy's immune frames
const int ENEMY_HIT_TIMER = 6;
// Index for the enemy's draw tile.
const int ENEMY_TILE = 7;

// Indices for enemy state and arguments.
const int ENEMY_STATE = 8;
const int ENEMY_STATE_A = 9;
const int ENEMY_STATE_B = 10;
const int ENEMY_STATE_C = 11;

// Indices for enemy sense abilities.
const int ENEMY_SIGHT = 12;
const int ENEMY_SCENT = 13;

// Index for how long it's been since link has been seen.
// -1 is never seen / lost sight of completely.
const int ENEMY_LINK_TIME = 14;

// Indices for where the enemy thinks link is.
const int ENEMY_LINK_X = 15;
const int ENEMY_LINK_Y = 16;

// Indices for the start of the enemy's damage arrays.
const int ENEMY_ATTACK       = 20;
const int ENEMY_DEFENSE      = 30;
const int ENEMY_SHIELD       = 40;
const int ENEMY_SHIELD_ANGLE = 41;

////////////////////////////////////////////////////////////////
// States

const int ENEMY_STATE_NONE = 0;

//// Knockback
// Knockback state id.
const int ENEMY_STATE_KNOCKBACK = 1;
// State indices a through c.
const int ENEMY_KNOCKBACK_SPEED = 9;
const int ENEMY_KNOCKBACK_ANGLE = 10;
const int ENEMY_KNOCKBACK_TIME = 11;

////////////////////////////////////////////////////////////////
// Basic Accessors

int Enemy_Val(int id, int index) {
	return Enemy_Data[id * ENEMY_DATA_SIZE + index];}

void Enemy_Val(int id, int index, int value) {
	Enemy_Data[id * ENEMY_DATA_SIZE + index] = value;}

void Enemy_ValAdd(int id, int index, int value) {
	Enemy_Data[id * ENEMY_DATA_SIZE + index] += value;}

bool Enemy_Flag(int id, int index, int key) {
	return Enemy_Val(id, index) & key;}

void Enemy_Flag(int id, int index, int key, bool value) {
	int flagset = Enemy_Val(id, index);
	if (value) {flagset |= key;}
	else {flagset &= ~key;}
	Enemy_Val(id, index, flagset);}

////////////////////////////////////////////////////////////////
// Allocation

// If a given id is a valid enemy id.
bool Enemy_ValidId(int id) {
	return 0 <= id && id < ENEMY_DATA_COUNT;}

// Create an enemy for a given npc. Returns the id.
int Enemy_Initialize(npc o) {
	// If the npc isn't valid, fail.
	if (!o->isValid()) {
		Enemy_Initialize_MSG_1();
		return -1;}

	// Find an unused enemy id.
	int id = G[Enemy_LastId];
	for (id = (id + 1) % ENEMY_DATA_COUNT;
			 id != G[Enemy_LastId];
			 id = (id + 1) % ENEMY_DATA_COUNT) {
		// Check all existing npcs for an id overlap. Since we're keeping track of
		// the starting id, this should only be run once in most circumstances.
		bool id_free = true;
		for (int i = 1; i <= Screen->NumNPCs(); ++i) {
			npc other_o = Screen->LoadNPC(i);
			int other_id = Npc_Id(other_o);
			if (id == other_id) {
				id_free = false;
				break;}}
		if (id_free) {break;}}

	// If we failed to find an unused id, quit.
	if (G[Enemy_LastId] == id) {
		Enemy_Initialize_MSG_2();
		return -1;}

	// Set the npc's id.
	Npc_Id(o, id);

	// Default npc settings.
	o->CollDetection = false;

	// Cleanup the old enemy data if needed. It shouldn't be needed, though.
	Enemy_Free(id);

	// Initialize enemy to its starting state.
	o->DrawYOffset = 0;
	Enemy_Flag(id, ENEMY_F1, ENEMY_F1_ALLOC, true);
	Enemy_Val(id, ENEMY_BOUND_UP, o->Y + 4);
	Enemy_Val(id, ENEMY_BOUND_DOWN, o->Y + 16);
	Enemy_Val(id, ENEMY_BOUND_LEFT, o->X + 2);
	Enemy_Val(id, ENEMY_BOUND_RIGHT, o->X + 14);
	Enemy_Val(id, ENEMY_LIFE, o->HP);
	Enemy_Tile(id, o->OriginalTile);
	Enemy_LinkTime(id, -1);

	return id;}
void Enemy_Initialize_MSG_1() {
	int a[]="ERROR: [Enemy_Initialize] npc o is invalid.";
	TraceS(a); TraceNL();}
void Enemy_Initialize_MSG_2() {
	int a[]="ERROR: [Enemy_Initialize] Out of enemy ids.";
	TraceS(a); TraceNL();}

// Free an enemy slot.
void Enemy_Free(int id) {
	if (!Enemy_Flag(id, ENEMY_F1, ENEMY_F1_ALLOC)) {return;}
	Array_Fill(Enemy_Data, 0, id * ENEMY_DATA_SIZE, (id + 1) * ENEMY_DATA_SIZE);}

// Free all enemy slots.
void Enemy_FreeAll() {
	for (int id = 0; id < ENEMY_DATA_COUNT; ++id) {
		Enemy_Free(id);}}

// Kills an npc and frees its data.
void Enemy_Kill(npc o) {
	o->HP = -1000;;}
void Enemy_Kill(int id) {
	int index = Npc_ScreenIndex(id);
	if (index) {
		npc o = Screen->LoadNPC(index);
		o->HP = -1000;}}

// Destroys an npc and frees its data.
void Enemy_Destroy(npc o) {
	Enemy_Free(Npc_Id(o));
	Remove(o);}
void Enemy_Destroy(int id) {
	Enemy_Free(id);
	int index = Npc_ScreenIndex(id);
	if (index) {
		Remove(Screen->LoadNPC(index));}}

////////////////////////////////////////////////////////////////
// Accessors

// Gets the offset for the enemy's boundary box.
int Enemy_Bounds(int id) {
	return ENEMY_DATA_SIZE * id + ENEMY_BOUNDS;}

// Set the enemy's position.
void Enemy_Position(int id, int x, int y) {
	int dx = x - Enemy_Val(id, ENEMY_BOUND_LEFT);
	int dy = y - Enemy_Val(id, ENEMY_BOUND_UP);
	Box_Move(Enemy_Data, Enemy_Bounds(id), dx, dy);}

// Get the collision box for the enemy.
void Enemy_ReadBounds(int id, int box, int offset) {
	Array_Copy(box, offset, Enemy_Data, Enemy_Bounds(id), 4);}

// Set's the enemy's position based on a collision box.
void Enemy_WriteBounds(int id, int box, int offset) {
	Array_Copy(Enemy_Data, Enemy_Bounds(id), box, offset, 4);}

int Enemy_Dir(int id) {
	int index = Npc_ScreenIndex(id);
	npc o = Screen->LoadNPC(index);
	return o->Dir;}
void Enemy_Dir(int id, int value) {
	int index = Npc_ScreenIndex(id);
	npc o = Screen->LoadNPC(index);
	o->Dir = value;}

// Sets R[0] and R[1] to the center.
void Enemy_Center(int id) {
	Box_Center(Enemy_Data, Enemy_Bounds(id));}

int Enemy_State(int id) {return Enemy_Val(id, ENEMY_STATE);}
void Enemy_State(int id, int value) {Enemy_Val(id, ENEMY_STATE, value);}

int Enemy_Life(int id) {return Enemy_Val(id, ENEMY_LIFE);}
void Enemy_Life(int id, int value) {Enemy_Val(id, ENEMY_LIFE, value);}
void Enemy_LifeAdd(int id, int value) {Enemy_ValAdd(id, ENEMY_LIFE, value);}

int Enemy_HitTimer(int id) {return Enemy_Val(id, ENEMY_HIT_TIMER);}
void Enemy_HitTimer(int id, int value) {Enemy_Val(id, ENEMY_HIT_TIMER, value);}

int Enemy_Tile(int id) {return Enemy_Val(id, ENEMY_TILE);}
void Enemy_Tile(int id, int value) {Enemy_Val(id, ENEMY_TILE, value);}

int Enemy_Sight(int id) {return Enemy_Val(id, ENEMY_SIGHT);}
void Enemy_Sight(int id, int value) {Enemy_Val(id, ENEMY_SIGHT, value);}
int Enemy_Scent(int id) {return Enemy_Val(id, ENEMY_SCENT);}
void Enemy_Scent(int id, int value) {Enemy_Val(id, ENEMY_SCENT, value);}

int Enemy_LinkX(int id) {return Enemy_Val(id, ENEMY_LINK_X);}
void Enemy_LinkX(int id, int value) {Enemy_Val(id, ENEMY_LINK_X, value);}
int Enemy_LinkY(int id) {return Enemy_Val(id, ENEMY_LINK_Y);}
void Enemy_LinkY(int id, int value) {Enemy_Val(id, ENEMY_LINK_Y, value);}
int Enemy_LinkTime(int id) {return Enemy_Val(id, ENEMY_LINK_TIME);}
void Enemy_LinkTime(int id, int value) {Enemy_Val(id, ENEMY_LINK_TIME, value);}

int Enemy_Speed(int id) {
	int index = Npc_ScreenIndex(id);
	npc o = Screen->LoadNPC(index);
	return o->Step * 0.01;}

int Enemy_Attack(int id) {
	return ENEMY_DATA_SIZE * id + ENEMY_ATTACK;}
int Enemy_Defense(int id) {
	return ENEMY_DATA_SIZE * id + ENEMY_DEFENSE;}
int Enemy_Shield(int id) {
	return ENEMY_DATA_SIZE * id + ENEMY_SHIELD;}
int Enemy_ShieldAngle(int id) {
	return Enemy_Val(id, ENEMY_SHIELD_ANGLE);}
void Enemy_ShieldAngle(int id, int value) {
	Enemy_Val(id, ENEMY_SHIELD_ANGLE, value);}

////////////////////////////////////////////////////////////////
// Active Script Calls

// Grabs unmanaged npcs.
void Enemy_Detect() {
	if (G[Screen_Changed]) {G[Enemy_ScreenDetected] = 0;}

	// Once we've detected enemies on this screen, don't do so again.
	if (G[Enemy_ScreenDetected]) {return;}

	// If there are enemies on the screen, mark as being done.
	if (Screen->NumNPCs()) {G[Enemy_ScreenDetected] = 1;}

	for (int i = 1; i <= Screen->NumNPCs(); ++i) {
		npc o = Screen->LoadNPC(i);
		int id = Npc_Id(o);
		// If it has an id, skip it.
		if (-1 != id) {continue;}

		// First, check to see if the enemy has a script to run.
		int scr = o->Attributes[NPC_ATTR_SCRIPT];
		int ffc_index;
		if (scr != 0) {
			ffc_index = FFC_FindFree();
			// If there's no free ffc, kill the npc.
			if (-1 == ffc_index) {
				Enemy_Detect_MSG_1();
				Remove(o);
				continue;}}

		// Initialize enemy.
		id = Enemy_Initialize(o);

		// Now setup the script
		if (scr != 0) {
			ffc run = Screen->LoadFFC(ffc_index);
			run->Script = scr;
			run->InitD[ENEMY_FFCD_ID] = id;}}}
void Enemy_Detect_MSG_1() {
	int a[]="ERROR: No free ffc. Destroying npc.";
	TraceS(a); TraceNL();}

// Moves enemies appropriately.
void Enemy_Update() {
	if (G[Screen_Changed]) {Enemy_FreeAll();}

	for (int i = 1; i <= Screen->NumNPCs(); ++i) {
		npc o = Screen->LoadNPC(i);
		if (!Npc_IsEnemy(o)) {continue;}
		int id = Npc_Id(o);

		if (Enemy_Life(id) <= 0) {
			Enemy_Free(id);
			Enemy_Kill(o);
			continue;}

		// Update link knowledge.
		Enemy_SenseLink(id);

		// Tick down hit timer.
		int hit = Enemy_HitTimer(id);
		if (hit > 0) {
			--hit;
			Enemy_HitTimer(id, hit);}

		// If the enemy collides with link, they hit each other.
		if (hit <= 0 && G[Link_HitTimer] <= 0
				&& Box_Collision(G, Link_Bounds, Enemy_Data, Enemy_Bounds(id))) {
			Enemy_Center(id);
			Link_TakeHit(Enemy_Data, Enemy_Attack(id), R[0], R[1]);
			Link_Center();
			Enemy_TakeHit(id, G, Link_Attack, R[0], R[1]);}

		// Do any specific state.
		int state = Enemy_State(id);
		if (ENEMY_STATE_KNOCKBACK == state) {
			Enemy_Move(id,
								 Enemy_Val(id, ENEMY_KNOCKBACK_SPEED),
								 Enemy_Val(id, ENEMY_KNOCKBACK_ANGLE));
			int timer = Enemy_Val(id, ENEMY_KNOCKBACK_TIME);
			timer -= 1;
			if (timer > 0) {
				Enemy_Val(id, ENEMY_KNOCKBACK_TIME, timer);}
			else {
				Enemy_State(id, ENEMY_STATE_NONE);}}

		// Update the object.
		o->X = Enemy_Val(id, ENEMY_BOUND_LEFT) - 2;
		o->Y = Enemy_Val(id, ENEMY_BOUND_UP) - 4;
		if (hit & 10b) {
			o->OriginalTile = TILE_BLANK;}
		else {
			o->OriginalTile = Enemy_Tile(id);}

		if (Debug_Boxes) {
			Box_Draw(Enemy_Data, Enemy_Bounds(id), 7, 23, OP_OPAQUE);}}}

////////////////////////////////////////////////////////////////
// Global Script Calls

void Enemy_Continue() {Enemy_FreeAll();}

////////////////////////////////////////////////////////////////
// Senses

// Marks link as spotted.
void Enemy_LinkSpotted(int id) {
	Link_Center();
	Enemy_LinkX(id, R[0]);
	Enemy_LinkY(id, R[1]);
	Enemy_LinkTime(id, 0);}

// Try to sense link.
void Enemy_SenseLink(int id) {
	int time = Enemy_LinkTime(id);
	if (time >= 0) {
		Enemy_LinkTime(id, time + 1);}

	Enemy_Center(id);
	int x1 = R[0];
	int y1 = R[1];
	Link_Center();
	int x2 = R[0];
	int y2 = R[1];

	int sight = Enemy_Sight(id);
	if (sight > 0) {
		int angle = Angle(x1, y1, x2, y2);
		int delta = angle - Dir_Degrees(Enemy_Dir(id));
		delta = Abs(delta) % 360;
		if (delta > 180) {delta = 360 - delta;}
		if (delta <= sight * 0.5) {
			if (Terrain_Line(x1, y1, x2, y2) & TERRAIN_SEE) {
				Enemy_LinkSpotted(id);
				return;}}}

	int scent = Enemy_Scent(id);
	if (scent > 0 && Distance(x1, y1, x2, y2) < scent) {
		Enemy_LinkSpotted(id);
		return;}}

////////////////////////////////////////////////////////////////
// Use

// Move the enemy by the given amount. Returns the distance traveled.
int Enemy_Move(int id, int distance, int angle) {
	return Terrain_BoxSlide(Enemy_Data, Enemy_Bounds(id), distance, angle,
													TERRAIN_WALK | TERRAIN_ONSCREEN);}

// Make the enemy walk towards the given coordinates.
// id - the enemy id
// x, y - where the enemy is trying to move its center to
int Enemy_Walk(int id, int x, int y) {
	Enemy_Center(id);
	int start_x = R[0];
	int start_y = R[1];
	int dx = x - start_x;
	int dy = y - start_y;
	int distance = Min(Enemy_Speed(id), Sqrt(dx*dx + dy*dy));
	int angle = Angle(dx, dy);

	distance = Terrain_BoxSlide(Enemy_Data, Enemy_Bounds(id), distance, angle,
															TERRAIN_WALK | TERRAIN_ONSCREEN);

	Enemy_Center(id);
	int end_x = R[0];
	int end_y = R[1];
	Enemy_Dir(id, Dir_Major(end_x - start_x, end_y - start_y));

	return distance;}

// Make the enemy walk towards the given coordinates, using the walk function.
// id - the enemy id
// x, y - where the enemy is trying to move its center to
int Enemy_WalkSmart(int id, int x, int y) {
	Enemy_Center(id);
	int start_x = R[0];
	int start_y = R[1];
	int dx = x - start_x;
	int dy = y - start_y;
	int distance = Min(Enemy_Speed(id), Sqrt(dx*dx + dy*dy));
	int dir = Dir_Major(dx, dy);

	distance = Terrain_BoxWalk(Enemy_Data, Enemy_Bounds(id), distance,
														 dir, TERRAIN_WALK | TERRAIN_ONSCREEN);

	Enemy_Center(id);
	int end_x = R[0];
	int end_y = R[1];
	Enemy_Dir(id, Dir_Major(end_x - start_x, end_y - start_y));

	return distance;}

////////////////////////////////////////////////////////////////
// Wandering

const int ENEMY_WANDER_DIST = 0;
const int ENEMY_WANDER_ANGLE = 1;
const int ENEMY_WANDER_WAIT = 2;

// Wander around. Takes a 3 element data array to keep track of where we're
// going.
void Enemy_Wander(int enemy_id, int data) {
	// If we're stopped pick a new direction. And wait for a while.
	if (data[ENEMY_WANDER_DIST] <= 0) {
		data[ENEMY_WANDER_DIST] = Rand(100) + 100;
		data[ENEMY_WANDER_ANGLE] = Rand(361) - 180;
		data[ENEMY_WANDER_WAIT] = Rand(120) - 60;
		return;}

	// Rest
	if (data[ENEMY_WANDER_WAIT] > 0) {
		--data[ENEMY_WANDER_WAIT];
		return;}

	// Move.
	int dx = Cos(data[ENEMY_WANDER_ANGLE]) * data[ENEMY_WANDER_DIST];
	int dy = Sin(data[ENEMY_WANDER_ANGLE]) * data[ENEMY_WANDER_DIST];
	Box_Center(Enemy_Data, Enemy_Bounds(enemy_id));
	int distance = Enemy_Walk(enemy_id, R[0] + dx, R[1] + dy);

	// If we can no longer move in the current direction, pick a new direction
	// (next round).
	if (distance <= 0) {
		data[ENEMY_WANDER_DIST] = 0;
		return;}

	Enemy_Dir(enemy_id, Dir_Major(dx, dy));
	data[ENEMY_WANDER_DIST] -= distance;}

////////////////////////////////////////////////////////////////
// Damage

void Enemy_TakeHit(int enemy_id, int damage_array, int damage_offset, int source_x, int source_y) {
	Enemy_Center(enemy_id);
	int angle = Angle(source_x, source_y, R[0], R[1]);
	Damage_Compute(damage_array, damage_offset,
								 Enemy_Data, Enemy_Defense(enemy_id),
								 Enemy_Data, Enemy_Shield(enemy_id),
								 Dir_Angle(Enemy_Dir(enemy_id)), Enemy_ShieldAngle(enemy_id), angle);
	int knockback = R[DAMAGE_KNOCKBACK];
	int damage = R[DAMAGE_PURE];

	if (knockback > 0) {
		Enemy_Knockback(enemy_id, knockback, source_x, source_y);}

	Enemy_HitTimer(enemy_id, 48);

	if (damage <= 0) {
		Game->PlaySound(SFX_CLINK);}
	else {
		Game->PlaySound(SFX_EHIT);
		Enemy_LifeAdd(enemy_id, -damage);}

	if (Enemy_Life(enemy_id) <= 0) {
		Enemy_Kill(enemy_id);}}

void Enemy_Knockback(int id, int speed, int source_x, int source_y) {
	Enemy_Center(id);
	int dx = R[0] - source_x;
	int dy = R[1] - source_y;
	if (0 == dx && 0 == dy) {return;}
	Enemy_State(id, ENEMY_STATE_KNOCKBACK);
	Enemy_Val(id, ENEMY_KNOCKBACK_TIME, 6);
	Enemy_Val(id, ENEMY_KNOCKBACK_SPEED, speed);
	Enemy_Val(id, ENEMY_KNOCKBACK_ANGLE, Angle(dx, dy));}
