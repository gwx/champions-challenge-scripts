// Custom state id for attacking with the spear.
const int ENEMY_SPEAR_STATE_ATTACK = 100;

// State indices
const int ENEMY_SPEAR_ATTACK_PHASE = 9;
const int ENEMY_SPEAR_ATTACK_TIMER = 10;

//// Attack state phases.
// Phase for the initial start delay.
const int ENEMY_SPEAR_ATTACK_PHASE_START_DELAY = 1;
// Phase for the spear being out.
const int ENEMY_SPEAR_ATTACK_PHASE_MAIN = 2;
// Phase for the end delay.
const int ENEMY_SPEAR_ATTACK_PHASE_END_DELAY = 3;

//// Tile offsets for the different actions.
const int ENEMY_SPEAR_TILE_STAND = 0;
const int ENEMY_SPEAR_TILE_WALK1 = 20;
const int ENEMY_SPEAR_TILE_WALK2 = 40;
const int ENEMY_SPEAR_TILE_STAB = 60;
// Tile offset for the spear images.
const int ENEMY_SPEAR_TILE_SPEAR = 80;

// How close to being axis aligned with the target before attacking.
const int ENEMY_SPEAR_ALIGN_DISTANCE = 6;
// How close to get before you stab 'em.
const int ENEMY_SPEAR_SPEAR_DISTANCE_MIN = 16;
const int ENEMY_SPEAR_SPEAR_DISTANCE_MAX = 24;

// Number of frames it takes to start attacking.
const int ENEMY_SPEAR_DURATION_START_DELAY_MIN = 10;
const int ENEMY_SPEAR_DURATION_START_DELAY_MAX= 15;
// Number of frames the attack lasts.
const int ENEMY_SPEAR_DURATION_STAB_MIN = 30;
const int ENEMY_SPEAR_DURATION_STAB_MAX = 50;
// Number of frames to wait after attacking.
const int ENEMY_SPEAR_DURATION_END_DELAY_MIN = 25;
const int ENEMY_SPEAR_DURATION_END_DELAY_MAX = 40;
// How long before we lose sight of link.
const int ENEMY_SPEAR_DURATION_PURSUE = 240;
// Sound for the spear attacking.
const int ENEMY_SPEAR_ATTACK_SOUND = 30;
// How long to wait for the path timer to update
const int ENEMY_SPEAR_DURATION_PATH = 30;

ffc script enemy_spear {
	void run() {
		int enemy_id = this->InitD[ENEMY_FFCD_ID];
		if (-1 == enemy_id) {return;}

		int screen_index = Npc_ScreenIndex(enemy_id);
		if (!screen_index) {return;}

		npc o = Screen->LoadNPC(screen_index);
		lweapon wo;
		int base_tile = o->OriginalTile;

		// Give default defenses.
		Damage_Fill(Enemy_Data, Enemy_Defense(enemy_id), 5);

		// Give default attack.
		Enemy_Val(enemy_id, ENEMY_ATTACK + DAMAGE_KNOCKBACK, 12);
		Enemy_Val(enemy_id, ENEMY_ATTACK + DAMAGE_CRUSH, 10);

		// Give detection.
		Enemy_Sight(enemy_id, 150);
		Enemy_Scent(enemy_id, 48);
		// Initial detection.
		Enemy_SenseLink(enemy_id);

		// Data array keeping track of wander state.
		int wander[3];
		// Tracks walking animation.
		int walk_timer = 0;
		// Id of the spear weapon currently out.
		int weapon_id = -1;
		// Data array for pathfinding.
		int path[100];
		int path_index = 0;
		int path_timer = -1;

		// Randomize these so they don't clump together as much.
		int spear_distance = Rand(
				ENEMY_SPEAR_SPEAR_DISTANCE_MIN,
				ENEMY_SPEAR_SPEAR_DISTANCE_MAX);
		int start_delay = Rand(
				ENEMY_SPEAR_DURATION_START_DELAY_MIN,
				ENEMY_SPEAR_DURATION_START_DELAY_MAX);
		int stab_duration = Rand(
				ENEMY_SPEAR_DURATION_STAB_MIN,
				ENEMY_SPEAR_DURATION_STAB_MAX);
		int end_delay = Rand(
				ENEMY_SPEAR_DURATION_END_DELAY_MIN,
				ENEMY_SPEAR_DURATION_END_DELAY_MAX);

		while (true) {
			if (Enemy_Life(enemy_id) <= 0) {
				Weapon_Destroy(weapon_id);
				return;}

			if (!o->isValid()) {
				Enemy_Free(enemy_id);
				Weapon_Destroy(weapon_id);
				return;}

			int tile = base_tile;
			tile += o->Dir;
			int tile_offset = ENEMY_SPEAR_TILE_STAND;

			int state = Enemy_State(enemy_id);

			// Knockback, so destroy any lingering weapon.
			if (ENEMY_STATE_KNOCKBACK == state) {
				tile_offset = ENEMY_SPEAR_TILE_STAND;
				Weapon_Destroy(weapon_id);
				weapon_id = -1;}

			// Standard walking around.
			else if (ENEMY_STATE_NONE == state) {
				// Walking animation.
				walk_timer = (walk_timer + 1) % 48;
				if (walk_timer < 12) {tile_offset = ENEMY_SPEAR_TILE_STAND;}
				else if (walk_timer < 24) {tile_offset = ENEMY_SPEAR_TILE_WALK1;}
				else if (walk_timer < 36) {tile_offset = ENEMY_SPEAR_TILE_STAND;}
				else {tile_offset = ENEMY_SPEAR_TILE_WALK2;}

				int time = Enemy_LinkTime(enemy_id);
				// If we can't find link, wander.
				if (-1 == time || time > ENEMY_SPEAR_DURATION_PURSUE) {
					Enemy_Wander(enemy_id, wander);}

				// We can see link, so try to get close enough to attack.
				else {
					Enemy_Center(enemy_id);
					int ex = R[0];
					int ey = R[1];
					int lx = Enemy_LinkX(enemy_id);
					int ly = Enemy_LinkY(enemy_id);
					int dx = lx - ex;
					int dy = ly - ey;
					int distance = Sqrt(dx*dx + dy*dy);

					// Move along path.
					if (distance > 32) {
						// Check for updating the path.
						--path_timer;
						bool valid = true;
						if (path_timer < 0) {
							valid = Path_Find(Path_Index(ex, ey), Path_Index(lx, ly),
																TERRAIN_ONSCREEN | TERRAIN_WALK,
																path);
							if (valid) {
								path_timer = ENEMY_SPEAR_DURATION_PATH;
								path_index = 0;}
							else {
								// If we can't find a valid path, lose sight of link.
								Enemy_LinkTime(enemy_id, -1);
								Enemy_Wander(enemy_id, wander);}}
						if (valid) {
							// Check for needing to advance the path index.
							while (Abs(ex - Path_X(path[path_index])) + Abs(ey - Path_Y(path[path_index])) <= 11) {
								Trace(Abs(ex - Path_X(path[path_index])) + Abs(ey - Path_Y(path[path_index])));
								++path_index;}
							lx = Path_X(path[path_index]);
							ly = Path_Y(path[path_index]);
							if (Debug_Path) {Path_Draw(path);}
							Enemy_WalkSmart(enemy_id, lx, ly);}}
					// If we're close and haven't seen link, give up.
					else if (time > 0) {
						Enemy_LinkTime(enemy_id, -1);}
					// Move into alignment.
					else if (Min(Abs(dx), Abs(dy)) > ENEMY_SPEAR_ALIGN_DISTANCE) {
						// Invalidate old path.
						path_timer = -1;
						// Give a tiny bit of movement towards the target, but mostly
						// moving towards alignment.
						int x = lx;
						int y = ly;
						if (Abs(dx) < Abs(dy)) {
							y = ly * 0.1 + ey * 0.9;}
						else {
							x = lx * 0.1 + ex * 0.9;}
						Enemy_Walk(enemy_id, x, y);}
					// Move within spear range.
					else if (distance > spear_distance) {
						Enemy_Walk(enemy_id, lx, ly);}
					// Stab.
					else {
						Enemy_State(enemy_id, ENEMY_SPEAR_STATE_ATTACK);
						Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_PHASE, ENEMY_SPEAR_ATTACK_PHASE_START_DELAY);
						Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_TIMER, start_delay);}}}

			// In the middle of attacking.
			else if (ENEMY_SPEAR_STATE_ATTACK == state) {
				int phase = Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_PHASE);
				int timer = Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_TIMER);

				--timer;

				if (ENEMY_SPEAR_ATTACK_PHASE_START_DELAY == phase) {
					tile_offset = ENEMY_SPEAR_TILE_STAND;
					if (timer <= 0) {
						phase = ENEMY_SPEAR_ATTACK_PHASE_MAIN;
						timer = stab_duration;
						Game->PlaySound(ENEMY_SPEAR_ATTACK_SOUND);
						wo = Weapon_Create();
						weapon_id = R[0];
						Weapon_HitLink(weapon_id, true);
						Weapon_Pierce(weapon_id, true);
						Weapon_Val(weapon_id, WEAPON_DAMAGE + DAMAGE_KNOCKBACK, 10);
						Weapon_Val(weapon_id, WEAPON_DAMAGE + DAMAGE_PIERCE, o->WeaponDamage);
						Enemy_Center(enemy_id);
						int dir = Dir_Major(Enemy_LinkX(enemy_id) - R[0],
																Enemy_LinkY(enemy_id) - R[1]);
						o->Dir = dir;
						wo->Dir = dir;
						wo->OriginalTile = base_tile + ENEMY_SPEAR_TILE_SPEAR + dir;
						wo->NumFrames = 1;
						wo->DrawXOffset = Dir_X(dir) * 4;
						wo->DrawYOffset = Dir_Y(dir) * 4;
						Enemy_Center(enemy_id);}}

				if (ENEMY_SPEAR_ATTACK_PHASE_MAIN == phase) {
					tile_offset = ENEMY_SPEAR_TILE_STAB;
					if (!wo->isValid()) {
						phase = ENEMY_SPEAR_ATTACK_PHASE_END_DELAY;
						timer = end_delay;
						Weapon_Free(weapon_id);
						weapon_id = -1;}
					else if (timer > 0) {
						wo->DeadState = WDS_ALIVE;
						int dir = o->Dir;
						Enemy_Center(enemy_id);
						if (DIR_UP == dir) {
							Weapon_Bounds(weapon_id, R[1] - 22, R[1] + 2, R[0] - 6, R[0] + 2);}
						else if (DIR_DOWN == dir) {
							Weapon_Bounds(weapon_id, R[1] - 2, R[1] + 22, R[0] - 2, R[0] + 6);}
						else if (DIR_LEFT == dir) {
							Weapon_Bounds(weapon_id, R[1] - 2, R[1] + 6, R[0] - 22, R[0] + 2);}
						else if (DIR_RIGHT == dir) {
							Weapon_Bounds(weapon_id, R[1] - 2, R[1] + 6, R[0] - 2, R[0] + 22);}}
					else {
						Weapon_Destroy(weapon_id);
						weapon_id = -1;
						phase = ENEMY_SPEAR_ATTACK_PHASE_END_DELAY;
						timer = end_delay;}}

				if (ENEMY_SPEAR_ATTACK_PHASE_END_DELAY == phase) {
					tile_offset = ENEMY_SPEAR_TILE_STAND;
					if (timer <= 0) {
						Enemy_State(enemy_id, ENEMY_STATE_NONE);
						phase = 0;
						timer = 0;}}

				// Write back phase and timer.
				Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_PHASE, phase);
				Enemy_Val(enemy_id, ENEMY_SPEAR_ATTACK_TIMER, timer);}

			Enemy_Tile(enemy_id, tile + tile_offset);
			Waitframe();}}}
