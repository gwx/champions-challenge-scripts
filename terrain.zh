//// These are flags for different actions that a piece of terrain can allow.
// If the terrain allows ground movement.
const int TERRAIN_WALK      = 00001b;
// If the terrain allows air movement.
const int TERRAIN_FLY       = 00010b;
// If the terrain is water.
const int TERRAIN_SWIM      = 00100b;
// If the terrain allows vision.
const int TERRAIN_SEE       = 01000b;
// If the terrain is on screen.
const int TERRAIN_ONSCREEN  = 10000b;
// Convenience constant for offscreen.
const int TERRAIN_OFFSCREEN = 00011b;
// Convenience constant for open ground.
const int TERRAIN_NORMAL    = 11011b;
// Convenience constant for water.
const int TERRAIN_WATER     = 11110b;
// Convenience constant for all flags;
const int TERRAIN_ALL       = 11111b;

// This retrieves the terrain flags for a given position on the screen.
int Terrain_Location(int x, int y) {
	if (x < 0 || x >= 256 || y < 0 || y >= 176) {return TERRAIN_OFFSCREEN;}
	if (Screen->isSolid(x, y)) {return 0;}
	int location = ComboAt(x, y);
	if (CT_WATER == Screen->ComboT[location]) {return TERRAIN_WATER;}
	return TERRAIN_NORMAL;}

// This retrieves the minimum flags that fill a line on the screen.
int Terrain_Line(int x1, int y1, int x2, int y2) {
	int line[7];
	Line_Start(line, x1, y1, x2, y2);
	Line_Step(line); // We ignore the starting tile.

	int code = TERRAIN_ALL;
	while (Line_Step(line) && 0 != code) {
		code &= Terrain_Location(Line_X(line), Line_Y(line));}

	return code;}

// See if the terrain blocks a box from moving in a given direction. This
// checks 0.0001 pixels in front, so it must be right on the border to be
// effective.
// box, offset - box array and offset
// dir - the direction of movement
// terrain - terrain flags that are needed to be "walkable"
// return - true if movement is blocked
bool Terrain_BoxBlock(int box, int offset, int dir, int terrain) {
	int code = terrain;

	if (dir == DIR_UP || dir == DIR_LEFTUP || dir == DIR_RIGHTUP) {
		for (int x = box[offset + DIR_LEFT]; x < box[offset + DIR_RIGHT] - 0.0001; x += 8) {
			code &= Terrain_Location(x, box[offset + DIR_UP] - 0.0001);}
		code &= Terrain_Location(box[offset + DIR_RIGHT] - 0.0001, box[offset + DIR_UP] - 0.0001);}

	if (dir == DIR_DOWN || dir == DIR_LEFTDOWN || dir == DIR_RIGHTDOWN) {
		for (int x = box[offset + DIR_LEFT]; x < box[offset + DIR_RIGHT] - 0.0001; x += 8) {
			code &= Terrain_Location(x, box[offset + DIR_DOWN]);}
		code &= Terrain_Location(box[offset + DIR_RIGHT] - 0.0001, box[offset + DIR_DOWN]);}

	if (dir == DIR_LEFT || dir == DIR_LEFTUP || dir == DIR_LEFTDOWN) {
		for (int y = box[offset + DIR_UP]; y < box[offset + DIR_DOWN] - 0.0001; y += 8) {
			code &= Terrain_Location(box[offset + DIR_LEFT] - 0.0001, y);}
		code &= Terrain_Location(box[offset + DIR_LEFT] - 0.0001, box[offset + DIR_DOWN] - 0.0001);}

	if (dir == DIR_RIGHT || dir == DIR_RIGHTUP || dir == DIR_RIGHTDOWN) {
		for (int y = box[offset + DIR_UP]; y < box[offset + DIR_DOWN] - 0.0001; y += 8) {
			code &= Terrain_Location(box[offset + DIR_RIGHT], y);}
		code &= Terrain_Location(box[offset + DIR_RIGHT], box[offset + DIR_DOWN] - 0.0001);}

	return code != terrain;}

// Moves a box, sliding around terrain, up until it would hit a new 8x8 quarter tile.
// box, offset - box array and offset
// distance - distance to travel.
// angle - direction (degrees) to travel in.
// terrain - terrain flags that are needed to be "walkable".
// return - the total distance traveled.
int Terrain_BoxStep(int box, int offset, int distance, int angle, int terrain) {

	int dx = Cos(angle) * distance;
	int dy = Sin(angle) * distance;

	// Direction of travel.
	int dir = AngleDir8(angle);

	// This is the distance to the x border in the direction we're moving.
	int border_dx = 0;

	if (0 != dx) {
		// Calculate distance to x border.
		if (dx > 0) {border_dx = Box_BorderDistance(box, offset, DIR_RIGHT);}
		if (dx < 0) {border_dx = Box_BorderDistance(box, offset, DIR_LEFT);}

		// If we're on the x border, check to see if we're blocked.
		if (0 == border_dx) {
			if (Terrain_BoxBlock(box, offset, Cond(dx > 0, DIR_RIGHT, DIR_LEFT), terrain)) {
				// Since we're blocked, cancel x movement.
				dx = 0;
				// If we're at a decent angle, transfer the lost movement to y.
				if (0 != Dir_Y(dir)) {dy = Sign(dy) * distance;}
				// Otherwise, stop moving.
				else {return 0;}}
			// If we're not blocked, then we'll want to advance to the next border.
			border_dx = 8;}}

  // This is the distance to the y border in the direction we're moving.
	int border_dy = 0;

	if (0 != dy) {
		// Calculate distance to y border.
		if (dy > 0) {border_dy = Box_BorderDistance(box, offset, DIR_DOWN);}
		if (dy < 0) {border_dy = Box_BorderDistance(box, offset, DIR_UP);}

		// If we're on the y border, check to see if we're blocked.
		if (0 == border_dy) {
			if (Terrain_BoxBlock(box, offset, Cond(dy > 0, DIR_DOWN, DIR_UP), terrain)) {
				// Since we're blocked, cancel y movement.
				dy = 0;
				// If we're at a decent angle, transfer the lost movement to y.
				if (0 != Dir_X(dir)) {dx = Sign(dx) * distance;}
				// Otherwise, stop moving.
				else {return 0;}}
			// If we're not blocked, then we'll want to advance to the next border.
			border_dy = 8;}}

	// Cancel if we've lost all movement.
	if (0 == dx && 0 == dy) {return 0;}

	// We're only moving along the x axis.
	if (0 == dy) {

		// Don't move more than requested.
		if (Abs(dx) > border_dx) {dx = Sign(dx) * border_dx;}

		// Advance to the next border.
		Box_Move(box, offset, dx, 0);
		return Abs(dx);}

	// We're only moving along the y axis.
	if (0 == dx) {

		// Don't move more than requested.
		if (Abs(dy) > border_dy) {dy = Sign(dy) * border_dy;}

		// Advance to the next border.
		Box_Move(box, offset, 0, dy);
		return Abs(dy);}

	// We're moving diagonally and hitting the x border first.
	if (Abs(border_dx / dx) <= Abs(border_dy / dy)) {

    // Don't move more than requested.
		if (Abs(dx) > border_dx) {
			int factor = border_dx / Abs(dx);
			dx = Sign(dx) * border_dx;
			dy *= factor;}

		// Advance to the next border.
		Box_Move(box, offset, dx, dy);
		return Sqrt(dx*dx + dy*dy);}

	// We're moving diagonally and hitting the y border first.
	else {

    // Don't move more than requested.
		if (Abs(dy) > border_dy) {
			int factor = border_dy / Abs(dy);
			dy = Sign(dy) * border_dy;
			dx *= factor;}

		// Advance to the next border.
		Box_Move(box, offset, dx, dy);
		return Sqrt(dx*dx + dy*dy);}}

// Moves a box, sliding around terrain, until it runs out of movement or can't
// move anymore.
// box, offset - box array and offset
// distance - distance to travel.
// angle - direction (degrees) to travel in.
// terrain - terrain flags that are needed to be "walkable".
// return - the total distance traveled.
int Terrain_BoxSlide(int box, int offset, int distance, int angle, int terrain) {
	int distance_traveled = 0;
	int step = Terrain_BoxStep(box, offset, distance, angle, terrain);
	while (step > 0 && distance > 0) {
		distance -= step;
		distance_traveled += step;
		step = Terrain_BoxStep(box, offset, distance, angle, terrain);}
	return distance_traveled;}

// Moves a box in the given direction. If it encounters terrain and is close
// enough to the edge, it will attempt to walk around it. Mostly used for
// Link's walking.
// box, offset - box array and offset
// distance - distance to travel.
// dir - direction to travel in.
// terrain - terrain flags that are needed to be "walkable".
// return - the total distance traveled.
int Terrain_BoxWalk(int box, int offset, int distance, int dir, int terrain) {
	int distance_traveled = 0;
	int angle = Dir_Angle(dir);
	while (distance > 0) {
		int step = Terrain_BoxStep(box, offset, distance, angle, terrain);

		// We were stopped for some reason.
		if (0 == step) {

			// If we're moving in a cardinal direction, see if we want to move
			// around the blockage.
			if (dir < 4) {
				int test_box[4];

				int dir_1 = Dir_ClockwiseCardinal(dir);
				bool dir_1_open = false;
				Array_Copy(test_box, 0, box, offset, 4);
				int dir_1_bd = 8 - Box_BorderDistance(test_box, 0, OppositeDir(dir_1));
				Box_Move(test_box, 0, Dir_X(dir_1) * dir_1_bd, Dir_Y(dir_1) * dir_1_bd);
				if (!Terrain_BoxBlock(test_box, 0, dir_1, terrain)) {
					//Box_Move(test_box, Dir_X(dir_1) * (8 - dir_1_bd), Dir_Y(dir_1) * (8 - dir_1_bd));
					if (!Terrain_BoxBlock(test_box, 0, dir, terrain)) {dir_1_open = true;}}

				int dir_2 = Dir_CounterCardinal(dir);
				bool dir_2_open = false;
				Array_Copy(test_box, 0, box, offset, 4);
				int dir_2_bd = 8 - Box_BorderDistance(test_box, 0, OppositeDir(dir_2));
				Box_Move(test_box, 0, Dir_X(dir_2) * dir_2_bd, Dir_Y(dir_2) * dir_2_bd);
				if (!Terrain_BoxBlock(test_box, 0, dir_2, terrain)) {
					//Box_Move(test_box, Dir_X(dir_2) * (8 - dir_2_bd), Dir_Y(dir_2) * (8 - dir_2_bd));
					if (!Terrain_BoxBlock(test_box, 0, dir, terrain)) {dir_2_open = true;}}

				if (dir_1_open) {
					step = Terrain_BoxStep(box, offset, distance, Dir_Angle(dir_1), terrain);}
				else if (dir_2_open) {
					step = Terrain_BoxStep(box, offset, distance, Dir_Angle(dir_2), terrain);}}}

		// Didn't know how to handle it, so exit.
		if (0 == step) {break;}

		// Count distance traveled.
		distance -= step;
		distance_traveled += step;}

	return distance_traveled;}
