////////////////////////////////////////////////////////////////
// Npc->Misc Indices

const int NPC_MISC_ID = 0;

////////////////////////////////////////////////////////////////
// Npc->Attribute Indices

const int NPC_ATTR_SCRIPT = 11;

////////////////////////////////////////////////////////////////
// Npc Accessors.

// If the given npc is an enemy.
bool Npc_IsEnemy(npc o) {return true;}

// Get the enemy id for a given npc.
int Npc_Id(npc o) {
	return o->Misc[NPC_MISC_ID] - 1;}

// Set the enemy id for a given npc.
void Npc_Id(npc o, int id) {
	o->Misc[NPC_MISC_ID] = id + 1;}

////////////////////////////////////////////////////////////////
// Lookup

// Holds the last seen screen index for all npcs.
int Npc_LastScreenIndex[255];

// Get the screen index of the npc with the given id. If there is none, return
// 0.
int Npc_ScreenIndex(int id) {
	// First, try the saved screen index.
	int index = Npc_LastScreenIndex[id];
	if (1 <= index && index <= Screen->NumNPCs()) {
		npc o = Screen->LoadNPC(index);
		// Check to make sure it actually is the one we want.
		int actual_id = Npc_Id(o);
		if (actual_id == id) {
			return index;}
		// If it's not the one we want, update the indices we just learned about.
		else {
			Npc_LastScreenIndex[id] = 0;}}

	// We don't know where it is, so loop through on-screen objects until we
	// find it.
	for (int index = 1; index <= Screen->NumNPCs(); ++index) {
		// Grab the id.
		npc o = Screen->LoadNPC(index);
		int actual_id = Npc_Id(o);
		// Update the indices.
		Npc_LastScreenIndex[actual_id] = index;
		// If it's correct, return the index.
		if (actual_id == id) {return index;}}

	// We couldn't find the npc.
	return 0;}
