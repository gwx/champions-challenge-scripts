////////////////////////////////////////////////////////////////
// Npc Object Flags

// Misc index for the NPC's consistent id.
const int NPC_MISC_ID = 0;

// Misc index for the NPC's type
const int NPC_MISC_TYPE = 1;
// Enemy type.
const int NPC_MISC_TYPE_ENEMY = 1;

////////////////////////////////////////////////////////////////
// Management

const int NPC_MAX = 255;

// See if an npc exists.
bool Npc_Exists(npc npcs, int id) {
	npc o = npcs[id];
	return o->isValid();}

// Get the id of an npc.
int Npc_Id(npc o) {
	return o->Misc[NPC_MISC_ID] - 1;}
// Set the id of an npc.
int Npc_Id(npc npcs, npc o, int id) {
	o->Misc[NPC_MISC_ID] = id + 1;
	npcs[id] = o;}

// Assign a new npc its id.
int Npc_AssignId(npc npcs, npc o) {
	int id = Npc_Id(o);
	if (-1 != id) {return id;}
	for (int id = (G[Npc_LastId] + 1) % NPC_MAX;
			 id != G[Npc_LastId];
			 id = (id + 1) % NPC_MAX) {
		npc o2 = npcs[id];
		if (!o2->isValid()) {
			o->Misc[NPC_MISC_ID] = id + 1;
			G[Npc_LastId] = id;
			npcs[id] = o;
			return id;}}
	Npc_AssignId_Message1();
	return -1;}
void Npc_AssignId_Message1() {
	int a[]="ERROR: Could not assign npc id.";
	TraceS(a); TraceNL();}

// Create a new npc.
// R[0] - the id of the npc.
const int NPC_CREATE_R_ID = 0;
npc Npc_Create(int type) {
	npc o = Screen->CreateNPC(type);
	R[NPC_CREATE_R_ID] = Npc_AssignId(o);
	return o;}

// If an npc is an enemy.
bool Npc_IsEnemy(npc o) {
	return NPC_MISC_TYPE_ENEMY == o->Misc[NPC_MISC_TYPE];}
