const int DAMAGE_TYPE_COUNT = 4;
const int DAMAGE_KNOCKBACK  = 0;
// Starting index for pure damage.
const int DAMAGE_PURE       = 1;
const int DAMAGE_SLASH      = 1;
const int DAMAGE_PIERCE     = 2;
const int DAMAGE_CRUSH      = 3;

////////////////////////////////////////////////////////////////
// Compute damage.

void Damage_Compute(int offense_array, int offense_offset,
										int defense_array, int defense_offset,
										int shield_array, int shield_offset,
										int defense_angle, int shield_angle, int attack_angle) {

	int values[4];
	Array_Copy(values, 0, offense_array, offense_offset, DAMAGE_TYPE_COUNT);
	Array_Subtract(values, 0, defense_array, defense_offset, DAMAGE_TYPE_COUNT);
	// Check for guarding angle.
	if (shield_angle > 0
			&& Abs(WrapDegrees(attack_angle - defense_angle - 180)) <= shield_angle * 0.5) {
		Array_Subtract(values, 0, shield_array, shield_offset, DAMAGE_TYPE_COUNT);}

	R[DAMAGE_KNOCKBACK] = values[DAMAGE_KNOCKBACK];

	R[DAMAGE_PURE] = 0;
	for (int i = DAMAGE_PURE; i < DAMAGE_TYPE_COUNT; ++i) {
		R[DAMAGE_PURE] += Max(0, values[i]);}}

////////////////////////////////////////////////////////////////
// Damage Manipulation

// Fill a damage array with the given value.
void Damage_Fill(int array, int offset, int value) {
	Array_Fill(array, value, offset, offset + DAMAGE_TYPE_COUNT);}

// Add damage to another
void Damage_Add(int target_array, int target_offset, int source_array, int source_offset) {
	Array_Add(target_array, target_offset, source_array, source_offset, DAMAGE_TYPE_COUNT);}

// Subtract damage from another
void Damage_Subtract(int target_array, int target_offset, int source_array, int source_offset) {
	Array_Subtract(target_array, target_offset, source_array, source_offset, DAMAGE_TYPE_COUNT);}

// Copy damage to another
void Damage_Copy(int target_array, int target_offset, int source_array, int source_offset) {
	Array_Copy(target_array, target_offset, source_array, source_offset, DAMAGE_TYPE_COUNT);}
