////////////////////////////////////////////////////////////////
// Link's state flags

const int LINK_F1_CAN_MOVE    = 0001b;
const int LINK_F1_CAN_ACT     = 0010b;
const int LINK_F1_HAS_ACTED   = 0100b;

const int LINK_TILE_LINK = 35620;
const int LINK_TILE_STAND = 22;
const int LINK_TILE_WALK = 42;
const int LINK_TILE_SWING = 62;
const int LINK_TILE_STAB = 82;

const int LINK_ANIM_WALK_1 = 12;
const int LINK_ANIM_WALK_TOTAL = 24;

// States.
const int LINK_STATE_NONE      =  0;
const int LINK_STATE_WALKING   =  1;
const int LINK_STATE_SCROLLING =  9;
const int LINK_STATE_KNOCKBACK = 30;
const int LINK_STATE_ACTION    = 40;

const int LA_STAB = 31;
const int LA_CUSTOM = 40;

const int LINK_STAM_REGEN = 0.02;
const int LINK_HIT_DURATION = 48;

////////////////////////////////////////////////////////////////
// Accessors

// R[0] and R[1] set to link's center.
void Link_Center() {
	Box_Center(G, Link_Bounds);}

void Link_Center(int x, int y) {
	Box_Center(G, Link_Bounds, x, y);}

bool Link_CanMove() {
	return G[Link_F1] & LINK_F1_CAN_MOVE;}

void Link_CanMove(bool value) {
	if (value) {G[Link_F1] |= LINK_F1_CAN_MOVE;}
	else {G[Link_F1] &= ~LINK_F1_CAN_MOVE;}}

bool Link_CanAct() {
	return G[Link_F1] & LINK_F1_CAN_ACT;}

void Link_CanAct(bool value) {
	if (value) {G[Link_F1] |= LINK_F1_CAN_ACT;}
	else {G[Link_F1] &= ~LINK_F1_CAN_ACT;}}

bool Link_HasActed() {
	return G[Link_F1] & LINK_F1_HAS_ACTED;}

void Link_HasActed(bool value) {
	if (value) {G[Link_F1] |= LINK_F1_HAS_ACTED;}
	else {G[Link_F1] &= ~LINK_F1_HAS_ACTED;}}

int Link_CurResource(int resource) {
	return G[Link_Resources + resource];}

void Link_CurResource(int resource, int value) {
	G[Link_Resources + resource] = Clamp(
			value,
			0,
			G[Link_MaxResources + resource]);}

void Link_CurResourceAdd(int resource, int value) {
	if (RES_NONE == resource) {return;}
	G[Link_Resources + resource] = Clamp(
			G[Link_Resources + resource] + value,
			0,
			G[Link_MaxResources + resource]);}

int Link_MaxResource(int resource) {
	return G[Link_MaxResources + resource];}

void Link_MaxResource(int resource, int value) {
	G[Link_MaxResources + resource] = value;}

////////////////////////////////////////////////////////////////
// Main

void Link_Update() {
	G[Link_F1] |= LINK_F1_CAN_ACT | LINK_F1_CAN_MOVE;
	G[Link_F1] &= ~LINK_F1_HAS_ACTED;

	if (G[Link_HitTimer] > 0) {--G[Link_HitTimer];}

	// Faking link's position for the screen change animation.
	if (LA_SCROLLING == Link->Action) {
		if (LINK_STATE_SCROLLING != G[Link_State]) {
			G[Link_State] == LINK_STATE_SCROLLING;
			if (-16 == Link->X) {Link->Dir = DIR_RIGHT;}
			if (256 == Link->X) {Link->Dir = DIR_LEFT;}
			if (-16 == Link->Y) {Link->Dir = DIR_DOWN;}
			if (176 == Link->Y) {Link->Dir = DIR_UP;}}
		Link_Center();
		Link_Center(
				Clamp(R[0] - Dir_X(Link->Dir) * 4, 8, 248),
				Clamp(R[1] - Dir_Y(Link->Dir) * 4, 8, 168));
		Link_UpdateObject();
		return;}
	else if (LINK_STATE_SCROLLING == G[Link_State]) {
		G[Link_State] = LINK_STATE_NONE;}

	// Update position if we teleported.
	if (G[Screen_Changed] && LA_SCROLLING != Link->Action) {
		G[Link_BoundUp] = Link->Y + 4;
		G[Link_BoundDown] = Link->Y + 16;
		G[Link_BoundLeft] = Link->X + 2;
		G[Link_BoundRight] = Link->X + 14;}

	// Knockback
	if (LINK_STATE_KNOCKBACK == G[Link_State]) {
		// Can't do anything else while being knocked back.
		G[Link_F1] &= ~(LINK_F1_CAN_ACT | LINK_F1_CAN_MOVE);
		// Do Knockback.
		Terrain_BoxSlide(G, Link_Bounds, G[Link_KnockbackSpeed], G[Link_KnockbackAngle],
										 TERRAIN_WALK | TERRAIN_ONSCREEN);
		// Countdown.
		--G[Link_StateTimer];
		if (G[Link_StateTimer] <= 0) {
			Link->CollDetection = true;
			G[Link_State] = LINK_STATE_NONE;}}

	// Actions
	Action_Update();

	if (Link_CanMove()) {Link_Walk();}

	if (!Link_HasActed()) {
		Link_CurResourceAdd(RES_STAM, LINK_STAM_REGEN);}

	Link_UpdateObject();

	// Die
	if (Link_CurResource(RES_LIFE) <= 0) {
		Link->HP = 0;
		Link->Action = LA_DYING;
		// Get life on revive.
		Link_CurResource(RES_LIFE, Link_MaxResource(RES_LIFE));}}

// Updates the link object to match his actual position.
void Link_UpdateObject() {
	Link->X = G[Link_BoundLeft];
	Link->Y = G[Link_BoundUp];
	// Adjust so the weird hit box doesn't confuse the screen transitions.
	if (Link->X > 240 && Link->X <= 244) {Link->X = 240;}
	if (Link->Y > 160 && Link->Y <= 164) {Link->Y = 160;}
	if (Link->X >= 244 || Link->X < 0) {Link->Y &= ~7;}
	if (Link->Y >= 164 || Link->Y < 0) {Link->X &= ~7;}}

void Link_Continue() {
	Link->CollDetection = false;
	Link->Invisible = true;
	Link_CurResource(RES_LIFE, Link_MaxResource(RES_LIFE));}

void Link_Walk() {
	if (LA_NONE != Link->Action && LA_WALKING != Link->Action) {return;}

	int speed = G[Link_Speed] * G[Link_SpeedMods];
	int dir = -1;

	G[Link_AnimationTimer] += speed;
	G[Link_State] = LINK_STATE_WALKING;

	if (Input_Held & KEYF_UP) {
		if (Input_Held & KEYF_LEFT) {
			if (DIR_UP != Link->Dir) {Link->Dir = DIR_LEFT;}
			dir = DIR_LEFTUP;}
		else if (Input_Held & KEYF_RIGHT) {
			if (DIR_UP != Link->Dir) {Link->Dir = DIR_RIGHT;}
			dir = DIR_RIGHTUP;;}
		else {
			Link->Dir = DIR_UP;
			dir = DIR_UP;}}
	else if (Input_Held & KEYF_DOWN) {
		if (Input_Held & KEYF_LEFT) {
			if (DIR_DOWN != Link->Dir) {Link->Dir = DIR_LEFT;}
			dir = DIR_LEFTDOWN;}
		else if (Input_Held & KEYF_RIGHT) {
			if (DIR_DOWN != Link->Dir) {Link->Dir = DIR_RIGHT;}
			dir = DIR_RIGHTDOWN;}
		else {
			Link->Dir = DIR_DOWN;
			dir = DIR_DOWN;}}
	else if (Input_Held & KEYF_LEFT) {
		Link->Dir = DIR_LEFT;
		dir = DIR_LEFT;}
	else if (Input_Held & KEYF_RIGHT) {
		Link->Dir = DIR_RIGHT;
		dir = DIR_RIGHT;}
	else {
		G[Link_State] = LINK_STATE_NONE;
		G[Link_AnimationTimer] -= speed; // undo added timer above.
		Link_CurResourceAdd(RES_STAM, LINK_STAM_REGEN);}

	if (-1 == dir) {return;}

	Terrain_BoxWalk(G, Link_Bounds, speed, dir, TERRAIN_WALK);}

void Link_Draw() {
	Link->Invisible = true;

	// Walking
	if (LINK_STATE_NONE == G[Link_State]
			|| LINK_STATE_WALKING == G[Link_State]
			|| LINK_STATE_SCROLLING == G[Link_State]) {
		G[Link_AnimationTimer] %= LINK_ANIM_WALK_TOTAL;
		if (G[Link_AnimationTimer] < LINK_ANIM_WALK_1) {
			G[Link_TileOffset] = LINK_TILE_STAND;}
		else {
			G[Link_TileOffset] = LINK_TILE_WALK;}}

	int tile = G[Link_TileBase];
	tile += G[Link_TileOffset];
	tile += G[Link_TileMods];
	tile += Link->Dir;
	if (!(G[Link_HitTimer] & 10b)) {
		Link_Center();
		Screen->FastTile(0, R[0] - 8, R[1] - 10, tile, 6, OP_OPAQUE);}

	if (Debug_Boxes) {
		Box_Draw(G, Link_Bounds, 7, 23, OP_OPAQUE);}}

void Link_Init() {
	G[Link_BoundRight] = 12;
	G[Link_BoundDown] = 12;
	G[Link_SpeedMods] = 1.0;
	Link->DrawYOffset = 0;
	Link->CollDetection = false;
	Link->Invisible = true;}

////////////////////////////////////////////////////////////////
// Damage

void Link_TakeHit(int damage_array, int damage_offset, int source_x, int source_y) {
	Link_Center();
	int angle = Angle(source_x, source_y, R[0], R[1]);
	Damage_Compute(damage_array, damage_offset,
								 G, Link_Defense,
								 G, Link_Shield,
								 Dir_Angle(Link->Dir), G[Link_ShieldAngle], angle);
	int knockback = R[DAMAGE_KNOCKBACK];
	int damage = R[DAMAGE_PURE];

	if (knockback > 0) {
		Link_Knockback(knockback, source_x, source_y);}

	G[Link_HitTimer] = LINK_HIT_DURATION;

	if (damage <= 0) {
		Game->PlaySound(SFX_CLINK);}
	else {
		Game->PlaySound(SFX_OUCH);
		Link_CurResourceAdd(RES_LIFE, -damage);}}

// Start knockback.
void Link_Knockback(int speed, int source_x, int source_y) {
	Link_Center();
	int dx = R[0] - source_x;
	int dy = R[1] - source_y;
	if (0 == dx && 0 == dy) {return;}
	G[Link_KnockbackSpeed] = speed;
	G[Link_KnockbackAngle] = Angle(dx, dy);
	G[Link_StateTimer] = 6;
	G[Link_State] = LINK_STATE_KNOCKBACK;}
