////////////////////////////////////////////////////////////////
// Weapons
// They'll be used to damage both link and enemies.
// They're backed by lweapons.

// Object id used for created weapons.
const int WEAPON_OBJECT_TYPE = 31;

////////////////////////////////////////////////////////////////
// Data Array

// Maximum number of weapons.
const int WEAPON_DATA_COUNT = 255;
// Space allocated for each weapon.
const int WEAPON_DATA_SIZE = 20;
// All weapon data.
int Weapon_Data[5100]; // size is previous two multiplied

//// First flag group.
const int WEAPON_F1 = 0;
// If this weapon slot has been allocated.
const int WEAPON_F1_ALLOC     = 000001b;
// Set if the weapon can hurt link
const int WEAPON_F1_HIT_LINK  = 000010b;
// Set if the weapon can hurt enemies
const int WEAPON_F1_HIT_ENEMY = 000100b;
// If the weapon pierces.
const int WEAPON_F1_PIERCE    = 001000b;
// If the weapon can cut grass.
const int WEAPON_F1_CUT       = 010000b;
// If the weapon can pickup items.
const int WEAPON_F1_PICKUP    = 100000b;

// Index for the weapon's valid terrain flags.
const int WEAPON_TERRAIN     =  1;

// Indices for the weapon's position
const int WEAPON_BOUNDS      =  4;
const int WEAPON_BOUND_UP    =  4;
const int WEAPON_BOUND_DOWN  =  5;
const int WEAPON_BOUND_LEFT  =  6;
const int WEAPON_BOUND_RIGHT =  7;

// Index for weapon damage.
const int WEAPON_DAMAGE      = 10; // .. 13

////////////////////////////////////////////////////////////////
// Basic Accessors

int Weapon_Val(int id, int index) {
	return Weapon_Data[id * WEAPON_DATA_SIZE + index];}

void Weapon_Val(int id, int index, int value) {
	Weapon_Data[id * WEAPON_DATA_SIZE + index] = value;}

bool Weapon_Flag(int id, int index, int key) {
	return Weapon_Val(id, index) & key;}

void Weapon_Flag(int id, int index, int key, bool value) {
	int flagset = Weapon_Val(id, index);
	if (value) {flagset |= key;}
	else {flagset &= ~key;}
	Weapon_Val(id, index, flagset);}

////////////////////////////////////////////////////////////////
// Allocation

// If a given id is a valid weapon id.
bool Weapon_ValidId(int id) {
	return 0 <= id && id < WEAPON_DATA_COUNT;}

// Creates a new weapon.
// return - the created lweapon
// R[0] - the lweapon's id
lweapon Weapon_Create() {
	// Create the weapon.
	lweapon o = Screen->CreateLWeapon(WEAPON_OBJECT_TYPE);

	// If it isn't valid, we're at our limit and failed.
	if (!o->isValid()) {
		Weapon_Create_MSG_1();
		R[0] = -1;
		return o;}

	// Find an unused weapon id.
	int id = G[Weapon_LastId];
	for (id = (id + 1) % WEAPON_DATA_COUNT;
			 id != G[Weapon_LastId];
			 id = (id + 1) % WEAPON_DATA_COUNT) {
		// Check all existing weapons for an id overlap. Since we're keeping track
		// of the starting id, this should only be run through once most of the
		// time.
		bool id_free = true;
		for (int i = 1; i <= Screen->NumLWeapons(); ++i) {
			lweapon other_o = Screen->LoadLWeapon(i);
			int other_id = LWeapon_Id(other_o);
			if (id == other_id) {
				id_free = false;
				break;}}
		if (id_free) {break;}}

	// We couldn't find an unused id, so die.
	if (G[Weapon_LastId] == id) {
		Weapon_Create_MSG_2();
		R[0] = -1;
		return o;}

	// Set the id.
	LWeapon_Id(o, id);
	R[0] = id;

	// Default weapon settings.
	o->CollDetection = false;
	o->NumFrames = 1;
	o->DrawYOffset = 0;

	// Cleanup the old weapon data if needed. It shouldn't be needed, though.
	Weapon_Free(id);

	// Mark the weapon slot as in use.
	Weapon_Flag(id, WEAPON_F1, WEAPON_F1_ALLOC, true);

	return o;}
void Weapon_Create_MSG_1() {
	int a[]="ERROR: [Weapon_Create] Out of lweapons.";
	TraceS(a); TraceNL();}
void Weapon_Create_MSG_2() {
	int a[]="ERROR: [Weapon_Create] Out of weapon ids.";
	TraceS(a); TraceNL();}

// Frees a weapon id.
void Weapon_Free(int id) {
	if (!Weapon_ValidId(id)) {return;}
	if (!Weapon_Flag(id, WEAPON_F1, WEAPON_F1_ALLOC)) {return;}
	Array_Fill(Weapon_Data, 0, id * WEAPON_DATA_SIZE, (id + 1) * WEAPON_DATA_SIZE);}

// Frees all weapon ids.
void Weapon_FreeAll() {
	for (int id = 0; id < WEAPON_DATA_COUNT; ++id) {
		Weapon_Free(id);}}

// Destroys a weapon and frees its data.
void Weapon_Destroy(lweapon o) {
	if (!o->isValid()) {return;}
	Weapon_Free(LWeapon_Id(o));
	Remove(o);}
void Weapon_Destroy(int id) {
	if (!Weapon_ValidId(id)) {return;}
	Weapon_Free(id);
	int index = LWeapon_ScreenIndex(id);
	if (index) {
		Remove(Screen->LoadLWeapon(index));}}

////////////////////////////////////////////////////////////////
// Accessors

bool Weapon_HitLink(int id) {
	return Weapon_Flag(id, WEAPON_F1, WEAPON_F1_HIT_LINK);}
void Weapon_HitLink(int id, bool value) {
	Weapon_Flag(id, WEAPON_F1, WEAPON_F1_HIT_LINK, value);}

bool Weapon_HitEnemy(int id) {
	return Weapon_Flag(id, WEAPON_F1, WEAPON_F1_HIT_ENEMY);}
void Weapon_HitEnemy(int id, bool value) {
	Weapon_Flag(id, WEAPON_F1, WEAPON_F1_HIT_ENEMY, value);}

bool Weapon_Pierce(int id) {
	return Weapon_Flag(id, WEAPON_F1, WEAPON_F1_PIERCE);}
void Weapon_Pierce(int id, bool value) {
	Weapon_Flag(id ,WEAPON_F1, WEAPON_F1_PIERCE, value);}
bool Weapon_Cut(int id) {
	return Weapon_Flag(id, WEAPON_F1, WEAPON_F1_CUT);}
void Weapon_Cut(int id, bool value) {
	Weapon_Flag(id ,WEAPON_F1, WEAPON_F1_CUT, value);}
bool Weapon_Pickup(int id) {
	return Weapon_Flag(id, WEAPON_F1, WEAPON_F1_PICKUP);}
void Weapon_Pickup(int id, bool value) {
	Weapon_Flag(id ,WEAPON_F1, WEAPON_F1_PICKUP, value);}

// Get the bounding box offset for the weapon.
int Weapon_Bounds(int id) {
	return WEAPON_DATA_SIZE * id + WEAPON_BOUNDS;}

// Set the bounding box for a weapon.
int Weapon_Bounds(int id, int up, int down, int left, int right) {
	Weapon_Val(id, WEAPON_BOUND_UP, up);
	Weapon_Val(id, WEAPON_BOUND_DOWN, down);
	Weapon_Val(id, WEAPON_BOUND_LEFT, left);
	Weapon_Val(id, WEAPON_BOUND_RIGHT, right);}

// Set the upper-left corner of the weapon.
void Weapon_Put(int id, int x, int y) {
	Box_Put(Weapon_Data, Weapon_Bounds(id), x, y);}

// Get the weapon's center.
void Weapon_Center(int id) {
	Box_Center(Weapon_Data, Weapon_Bounds(id));}

// Center the weapon at the given location.
void Weapon_Center(int id, int x, int y) {
	Box_Center(Weapon_Data, Weapon_Bounds(id), x, y);}

// Set the size for a weapon.
void Weapon_Size(int id, int width, int height) {
	Box_Size(Weapon_Data, Weapon_Bounds(id), width, height);}

int Weapon_Terrain(int id) {return Weapon_Val(id, WEAPON_TERRAIN);}
void Weapon_Terrain(int id, int value) {Weapon_Val(id, WEAPON_TERRAIN, value);}

int Weapon_Damage(int id) {
	return WEAPON_DATA_SIZE * id + WEAPON_DAMAGE;}

// Weapon's center for collision purposes.
void Weapon_CollisionCoords(int id) {
	int index = LWeapon_ScreenIndex(id);
	lweapon o = Screen->LoadLWeapon(index);
	Weapon_CollisionCoords(o, id);}
void Weapon_CollisionCoords(lweapon object, int id) {
	Box_Edge(Weapon_Data, Weapon_Bounds(id), OppositeDir(object->Dir));}

////////////////////////////////////////////////////////////////
// Object Interface

// If a given lweapon object is an actual weapon.
bool Weapon_IsWeapon(lweapon o) {
	return WEAPON_OBJECT_TYPE == o->ID;}

////////////////////////////////////////////////////////////////
// Active Script Calls

// Run through each weapon, checking for collisions.
void Weapon_Update() {
	if (G[Screen_Changed]) {Weapon_FreeAll();}

	for (int i = 1; i <= Screen->NumLWeapons(); ++i) {
		lweapon o = Screen->LoadLWeapon(i);
		if (!Weapon_IsWeapon(o)) {continue;}
		Weapon_Update(o, LWeapon_Id(o));}}

// Check an individual weapon for collisions.
void Weapon_Update(lweapon object, int id) {
	int speed;
	int terrain;
	int source_x;
	int source_y;
	int index;
	int enemy_id;
	int damage_index;
	npc o;
	item i;

	// Update weapon position.
	if (object->Step != 0) {
		speed = object->Step * 0.01;
		Box_Move(Weapon_Data, Weapon_Bounds(id),
						 Dir_X(object->Dir) * speed,
						 Dir_Y(object->Dir) * speed);}

	// Update object position.
	Weapon_Center(id);
	object->X = R[0] - 8;
	object->Y = R[1] - 8;

	// Destroy if invalid terrain.
	terrain = Weapon_Terrain(id);
	if (terrain != (terrain & Terrain_Location(R[0], R[1]))) {
		Weapon_Destroy(object);
		return;}

	// Slash terrain
	if (Weapon_Cut(id)) {
		Weapon_Center(id);
		Combo_Slash(R[0], R[1]);}

	// Pickup items.
	if (Weapon_Pickup(id)) {
		for (index = 1; index <= Screen->NumItems(); ++index) {
			i = Screen->LoadItem(index);
			if (!Item_CanPickup(i)) {continue;}
			Weapon_Center(id);
			if (i->X <= R[0] && R[0] < i->X + 16
					&& i->Y <= R[1] && R[1] < i->Y + 16) {
				i->X = G[Link_BoundLeft];
				i->Y = G[Link_BoundUp];}}}

	// Grab collision data.
	Weapon_CollisionCoords(object, id);
	source_x = R[0];
	source_y = R[1];
	damage_index = Weapon_Damage(id);

	// Collide against link?
	if (Weapon_HitLink(id)) {
		if (G[Link_HitTimer] <= 0
				&& Box_Collision(G, Link_Bounds, Weapon_Data, Weapon_Bounds(id))) {
			Link_TakeHit(Weapon_Data, damage_index, source_x, source_y);
			if (!Weapon_Pierce(id)) {
				Weapon_Destroy(object);
				return;}}}

	// Collide against enemies?
	if (Weapon_HitEnemy(id)) {
		for (index = 1; index <= Screen->NumNPCs(); ++index) {
			o = Screen->LoadNPC(index);
			enemy_id = Npc_Id(o);
			if (Enemy_HitTimer(enemy_id)) {continue;}
			if (!Box_Collision(Enemy_Data, Enemy_Bounds(enemy_id),
												 Weapon_Data, Weapon_Bounds(id))) {
				continue;}
			Enemy_TakeHit(enemy_id, Weapon_Data, damage_index, source_x, source_y);
			if (!Weapon_Pierce(id)) {
				Weapon_Destroy(object);
				return;}}}

	if (Debug_Boxes) {
		Box_Draw(Weapon_Data, Weapon_Bounds(id), 7, 23, OP_OPAQUE);}}
