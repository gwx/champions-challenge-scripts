////////////////////////////////////////////////////////////////
// Lweapon Object Flags

// Misc index for the lweapon's consistent id.
const int LWEAPON_MISC_ID = 0;

////////////////////////////////////////////////////////////////
// Management

// Maximum number of lweapons.
const int LWEAPON_MAX = 255;

// See if an lweapon exists.
bool LWeapon_Exists(lweapon lweapons, int id) {
	lweapon o = lweapons[id];
	return o->isValid();}

// Get the id of an lweapon.
int LWeapon_Id(lweapon o) {
	return o->Misc[LWEAPON_MISC_ID] - 1;}
// Set the id of an lweapon.
void LWeapon_Id(lweapon lweapons, lweapon o, int id) {
	o->Misc[LWEAPON_MISC_ID] = id + 1;
	lweapons[id] = o;}

// Assign a new lweapon its id.
int LWeapon_AssignId(lweapon lweapons, lweapon o) {
	int id = LWeapon_Id(o);
	if (-1 != id) {return id;}
	for (id = (G[LWeapon_LastId] + 1) % LWEAPON_MAX;
			 id != G[LWeapon_LastId];
			 id = (id + 1) % LWEAPON_MAX) {
		lweapon o2 = lweapons[id];
		if (!o2->isValid()) {
			LWeapon_Id(o, id);
			G[LWeapon_LastId] = id;
			lweapons[id] = o;
			return id;}}
	LWeapon_AssignId_Message1();
	return -1;}
void LWeapon_AssignId_Message1() {
	int a[]="ERROR: Could not assign lweapon id.";
	TraceS(a); TraceNL();}
