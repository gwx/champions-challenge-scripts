////////////////////////////////////////////////////////////////
// LWeapon->Misc Indices

const int LWEAPON_MISC_ID = 0;

////////////////////////////////////////////////////////////////
// LWeapon Accessors.

// If the lweapon is being used as a weapon.
bool LWeapon_IsWeapon(lweapon o) {
	return WEAPON_OBJECT_TYPE == o->ID;}

// Get the lweapon's weapon id.
int LWeapon_Id(lweapon o) {
	return o->Misc[LWEAPON_MISC_ID] - 1;}

// Set the lweapon's weapon id.
void LWeapon_Id(lweapon o, int id) {
	o->Misc[LWEAPON_MISC_ID] = id + 1;}

////////////////////////////////////////////////////////////////
// Lookup

// Holds the last seen screen index for all lweapons.
int LWeapon_LastScreenIndex[255];

// Get the screen index of the lweapon with the given id. If there is none,
// return 0.
int LWeapon_ScreenIndex(int id) {
	int index;
	int actual_id;
	lweapon o;

	// First, try the saved screen index.
	index = LWeapon_LastScreenIndex[id];
	if (1 <= index && index <= Screen->NumLWeapons()) {
		o = Screen->LoadLWeapon(index);
		// Check to make sure it actually is the one we want.
		actual_id = LWeapon_Id(o);
		if (actual_id == id) {
			return index;}
		// If it's not the one we want, update the index we just learned about.
		else {
			LWeapon_LastScreenIndex[id] = 0;}}

	// We don't know where it is, so loop through on-screen objects until we
	// find it.
	for (index = 1; index <= Screen->NumLWeapons(); ++index) {
		// Grab the id.
		o = Screen->LoadLWeapon(index);
		actual_id = LWeapon_Id(o);
		// Update the indices.
		LWeapon_LastScreenIndex[actual_id] = index;
		// If it's correct, return the index.
		if (actual_id == id) {return index;}}

	// We couldn't find the lweapon.
	return 0;}
